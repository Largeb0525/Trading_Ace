name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'

      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          
      - name: Run golangci-lint
        run: golangci-lint run

  build:
    runs-on: ubuntu-latest
    needs: lint
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: 2222
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U admin"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'

      - name: Get dependencies
        run: go mod tidy

      - name: Run tests
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USER: admin
          DATABASE_PASSWORD: 2222
          DATABASE_NAME: test_db
        run: go test -v ./...

      - name: Build
        run: go build -o Trading_Ace

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: Trading_Ace-binary
          path: Trading_Ace

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'

      - name: Go Semantic Release
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
